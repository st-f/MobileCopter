/* **************************************************************************** *//* VIRTUAL JOYSTICK FOR TABLETS (18 JAN 2011)/* By Hemanth Sharma/*/* http://www.hsharma.com/tech/* me@hsharma.com/*/* This content is intended for reference and learning only./* Reproducing/distributing/building upon this code is strictly not allowed./* **************************************************************************** */package com.controls{	import com.greensock.*;	import com.greensock.easing.*;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import com.controls.Joystick;	import com.controls.JoystickKnob;	public class Joystick extends MovieClip	{		private var my_x:Number;		private var my_y:Number;		private var knob:JoystickKnob;		private var hero:DisplayObject;		private var knob_tween:TweenLite;		public function Joystick(margin_left:Number, margin_bottom:Number, hero_mc:DisplayObject)		{			my_x=margin_left;			my_y=margin_bottom;			hero=hero_mc;			if (stage)			{				init();			}			else			{				addEventListener(Event.ADDED_TO_STAGE, init);			}		}		private function init(e:Event=null):void		{			if (hasEventListener(Event.ADDED_TO_STAGE))			{				removeEventListener(Event.ADDED_TO_STAGE, init);			}			this.x=my_x + this.width / 2;			this.y=stage.stageHeight - my_y - this.height / 2;			knob=new JoystickKnob();			knob.x=100;			knob.y=100;			knob.origin_x=0;			knob.origin_y=0;			addChild(knob);			trace("added knob at " + knob.x + ", " + knob.y);			this.addEventListener(MouseEvent.MOUSE_DOWN, snapKnob);			knob.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);			stage.addEventListener(MouseEvent.MOUSE_UP, mouseReleased);			knob.buttonMode=true;		}		private function snapKnob(event:MouseEvent):void		{			knob.x=this.mouseX;			knob.y=this.mouseY;			mouseDown(null);		}		private function mouseDown(event:MouseEvent):void		{			if (knob_tween)			{				knob_tween.kill();			}			this.addEventListener(Event.ENTER_FRAME, knobMoved);			knob.startDrag(false, new Rectangle(-this.width / 2, -this.height / 2, this.width, this.height));		}		private function knobMoved(event:Event):void		{			// LEFT OR RIGHT		/*if (knob.x > 20)		{			hero.move_right=true;			hero.move_left=false;		}		else if (knob.x < -20)		{			hero.move_right=false;			hero.move_left=true;		}		else		{			hero.move_right=false;			hero.move_left=false;		}		// UP OR DOWN		if (knob.y > 20)		{			hero.move_down=true;			hero.move_up=false;		}		else if (knob.y < -20)		{			hero.move_down=false;			hero.move_up=true;		}		else		{			hero.move_down=false;			hero.move_up=false;		}*/		}		private function mouseReleased(event:MouseEvent):void		{			knob.stopDrag();			/*hero.move_left=false;			hero.move_up=false;			hero.move_right=false;			hero.move_down=false;*/			if (this.hasEventListener(Event.ENTER_FRAME))			{				this.removeEventListener(Event.ENTER_FRAME, knobMoved);			}			mover();		}		private function mover():void		{			knob_tween=new TweenLite(knob, 0.5, {x: knob.origin_x, y: knob.origin_y, ease: Bounce.easeOut});		}	}}